{% raw %}
<html>
 <head></head>
 <body>
  <div id="preamble">
   <div class="sectionbody">
    <h3 id="about_this_guide" class="discrete">About this guide</h3>
    <div class="paragraph">
     <p>This guide covers using the <strong>Kroxylicious Operator</strong> to configure, deploy, secure, and operate the Kroxylicious proxy on Kubernetes. Refer to other Kroxylicious guides for information on running the proxy outside Kubernetes or for advanced topics such as plugin development.</p>
    </div>
   </div>
  </div>
  <div class="sect1">
   <h2 id="assembly-overview-operator">1. Kroxylicious Operator overview</h2>
   <div class="sectionbody">
    <div class="paragraph _abstract">
     <p>Kroxylicious Proxy is an Apache Kafka protocol-aware ("Layer 7") proxy designed to enhance Kafka-based systems.</p>
    </div>
    <div class="paragraph">
     <p>The Kroxylicious Operator is an <em>operator</em> for Kubernetes which simplifies deploying and operating the Kroxylicious Proxy.</p>
    </div>
    <div class="ulist _additional-resources">
     <div class="title">Additional resources</div>
     <ul>
      <li>
       <p><a href="https://kubernetes.io/" class="bare">https://kubernetes.io/</a></p>
      </li>
      <li>
       <p><a href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/" class="bare">https://kubernetes.io/docs/concepts/extend-kubernetes/operator/</a></p>
      </li>
     </ul>
    </div>
   </div>
  </div>
  <div class="sect1">
   <h2 id="assembly-operator-api-operator">2. API concepts</h2>
   <div class="sectionbody">
    <div class="sect2">
     <h3 id="api_resources_used_by_the_kroxylicious_proxy">2.1. API resources used by the Kroxylicious Proxy</h3>
     <div class="paragraph">
      <p>The operator takes these custom resources and core Kubernetes resources as inputs:</p>
     </div>
     <div class="dlist">
      <dl>
       <dt class="hdlist1">
        <code>KafkaProxy</code>
       </dt>
       <dd>
        <p>Defines an instance of the proxy.</p>
       </dd>
       <dt class="hdlist1">
        <code>VirtualKafkaCluster</code>
       </dt>
       <dd>
        <p>Represents a logical Kafka cluster that will be exposed to Kafka clients.</p>
       </dd>
       <dt class="hdlist1">
        <code>KafkaProxyIngress</code>
       </dt>
       <dd>
        <p>Configures how a virtual cluster is exposed on the network to Kafka clients.</p>
       </dd>
       <dt class="hdlist1">
        <code>KafkaService</code>
       </dt>
       <dd>
        <p>Specifies a <em>backend</em> Kafka cluster for a virtual cluster.</p>
       </dd>
       <dt class="hdlist1">
        <code>KafkaProtocolFilter</code>
       </dt>
       <dd>
        <p>Specifies filter mechanisms for use with a virtual cluster.</p>
       </dd>
       <dt class="hdlist1">
        <code>Secret</code>
       </dt>
       <dd>
        <p><code>KafkaService</code> and <code>KafkaProtocolFilter</code> resources may reference a <code>Secret</code> to provide security-sensitive data such as TLS certificates or passwords.</p>
       </dd>
       <dt class="hdlist1">
        <code>ConfigMap</code>
       </dt>
       <dd>
        <p><code>KafkaService</code> and <code>KafkaProtocolFilter</code> resources may reference a <code>ConfigMap</code> to provide non-sensitive configuration such as trusted CA certificates.</p>
       </dd>
      </dl>
     </div>
     <div class="imageblock">
      <div class="content">
       <img src="./_assets/operator-input-resource-topology.svg" alt="Diagram showing the input resources, KafkaProxy, VirtualKafkaCluster, etc, as boxes, connected by arrows representing the references between the resources.">
      </div>
      <div class="title">Figure 1. Example input resources, and the references between them.</div>
     </div>
     <div class="paragraph">
      <p>Based on the input resources just described, the operator generates the core Kubernetes resources needed to deploy the Kroxylicious proxy, such as:</p>
     </div>
     <div class="dlist">
      <dl>
       <dt class="hdlist1">
        <code>ConfigMap</code>
       </dt>
       <dd>
        <p>Provides the proxy configuration file mounted into the proxy container.</p>
       </dd>
       <dt class="hdlist1">
        <code>Deployment</code>
       </dt>
       <dd>
        <p>Manages the proxy <code>Pod</code> and container.</p>
       </dd>
       <dt class="hdlist1">
        <code>Service</code>
       </dt>
       <dd>
        <p>Exposes the proxy over the network to other workloads in the same Kubernetes cluster.</p>
       </dd>
      </dl>
     </div>
     <div class="paragraph">
      <p>The API is decomposed into multiple custom resources in a similar way to the Kubernetes Gateway API, and for similar reasons. You can make use of Kubernete’s Role-Based Access Control (RBAC) to divide responsibility for different aspects of the overall proxy functionality to different roles (people) in your organization.</p>
     </div>
     <div class="paragraph">
      <p>For example, you might grant networking engineers the ability to configure <code>KafkaProxy</code> and <code>KafkaProxyIngress</code>, while giving application developers the ability to configure <code>VirtualKafkaCluster</code>, <code>KafkaService</code>, and <code>KafkaProtocolFilter</code> resources.</p>
     </div>
     <div class="imageblock">
      <div class="content">
       <img src="./_assets/operator-output-resource-topology.svg" alt="Diagram showing the output resources, Deployment, Pod, ConfigMap, Service, with arrows showing the Deployment managing the Pod, the Pod mounting the ConfigMap, and the Service selecting the Pod.">
      </div>
      <div class="title">Figure 2. The generated Kubernetes resources, and the relationships between them</div>
     </div>
    </div>
    <div class="sect2">
     <h3 id="con-api-compatibilityoperator">2.2. Compatibility</h3>
     <div class="sect3">
      <h4 id="con-api-compatibility-apioperator">2.2.1. Custom resource APIs</h4>
      <div class="paragraph">
       <p>Kroxylicious custom resource definitions are packaged and deployed alongside the operator. Currently, there’s only a single version of the custom resource APIs: <code>v1alpha1</code>.</p>
      </div>
      <div class="paragraph">
       <p>Future updates to the operator may introduce new versions of the custom resource APIs. At that time the operator will be backwards compatible with older versions of those APIs and an upgrade procedure will be used to upgrade existing custom resources to the new API version.</p>
      </div>
     </div>
    </div>
   </div>
  </div>
  <div class="sect1">
   <h2 id="con-installing-operator">3. Installing the operator</h2>
   <div class="sectionbody">
    <div class="paragraph">
     <p><strong>TO DO</strong></p>
    </div>
   </div>
  </div>
  <div class="sect1">
   <h2 id="assembly-operator-deploying-a-proxy-operator">4. Deploying a proxy</h2>
   <div class="sectionbody">
    <div class="paragraph _abstract">
     <p>Deploy a basic proxy instance with a single virtual cluster exposed to Kafka clients on the same Kubernetes cluster.</p>
    </div>
    <div class="sect2">
     <h3 id="prerequisites">4.1. Prerequisites</h3>
     <div class="ulist">
      <ul>
       <li>
        <p>The operator must be installed in the Kubernetes cluster</p>
       </li>
       <li>
        <p>A Kafka cluster to be proxied</p>
       </li>
      </ul>
     </div>
    </div>
    <div class="sect2">
     <h3 id="the_required_resources">4.2. The required resources</h3>
     <div class="sect3">
      <h4 id="con-kafkaproxy-operator">4.2.1. Proxy configuration to host virtual clusters</h4>
      <div class="paragraph">
       <p>A <code>KafkaProxy</code> resource represents an instance of the Kroxylicious Proxy. Conceptually, it is the top-level resource that links together <code>KafkaProxyIngress</code>, <code>VirtualKafkaCluster</code>, <code>KafkaService</code>, and <code>KafkaProtocolFilter</code> resources to form a complete working proxy.</p>
      </div>
      <div class="paragraph">
       <p><code>KafkaProxy</code> resources are referenced by <code>KafkaProxyIngress</code> and <code>VirtualKafkaCluster</code> resources to define how the proxy is exposed and what it proxies.</p>
      </div>
      <div class="listingblock">
       <div class="title">
        Example <code>KafkaProxy</code> configuration
       </div>
       <div class="content">
        <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">kind</span>: <span class="string"><span class="content">KafkaProxy</span></span>
<span class="key">apiVersion</span>: <span class="string"><span class="content">kroxylicious.io/v1alpha1</span></span>
<span class="key">metadata</span>:
  <span class="key">namespace</span>: <span class="string"><span class="content">my-proxy</span></span>
  <span class="key">name</span>: <span class="string"><span class="content">simple</span></span>
<span class="key">spec</span>: <span class="string"><span class="content">{} </span></span><i class="conum" data-value="1"></i><b>(1)</b></code></pre>
       </div>
      </div>
      <div class="colist arabic">
       <table>
        <tbody>
         <tr>
          <td><i class="conum" data-value="1"></i><b>1</b></td>
          <td>An empty <code>spec</code> creates a proxy with default configuration.</td>
         </tr>
        </tbody>
       </table>
      </div>
     </div>
     <div class="sect3">
      <h4 id="con-configuring-kafkaproxyingress-on-cluster-access-operator">4.2.2. Networking configuration for on-cluster access</h4>
      <div class="paragraph">
       <p>A <code>KafkaProxyIngress</code> resource defines the networking configuration that allows Kafka clients to connect to a <code>VirtualKafkaCluster</code>.</p>
      </div>
      <div class="paragraph">
       <p>It is uniquely associated with a single <code>KafkaProxy</code> instance, but it is not uniquely associated with a <code>VirtualKafkaCluster</code>; it can be used by multiple <code>VirtualKafkaCluster</code> instances.</p>
      </div>
      <div class="paragraph">
       <p>This example shows a <code>KafkaProxyIngress</code> for exposing virtual clusters to Kafka clients running in the same Kubernetes cluster as the proxy.</p>
      </div>
      <div class="listingblock">
       <div class="title">
        Example <code>KafkaProxyIngress</code> configuration.
       </div>
       <div class="content">
        <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">kind</span>: <span class="string"><span class="content">KafkaProxyIngress</span></span>
<span class="key">apiVersion</span>: <span class="string"><span class="content">kroxylicious.io/v1alpha1</span></span>
<span class="key">metadata</span>:
  <span class="key">namespace</span>: <span class="string"><span class="content">my-proxy</span></span>
  <span class="key">name</span>: <span class="string"><span class="content">cluster-ip</span></span>
<span class="key">spec</span>:
  <span class="key">proxyRef</span>: <i class="conum" data-value="1"></i><b>(1)</b>
    <span class="key">name</span>: <span class="string"><span class="content">simple</span></span>
  <span class="key">clusterIP</span>: <i class="conum" data-value="2"></i><b>(2)</b>
    <span class="key">protocol</span>: <span class="string"><span class="content">TCP </span></span><i class="conum" data-value="3"></i><b>(3)</b></code></pre>
       </div>
      </div>
      <div class="colist arabic">
       <table>
        <tbody>
         <tr>
          <td><i class="conum" data-value="1"></i><b>1</b></td>
          <td>The <code>proxyRef</code> names the <code>KafkaProxy</code> resource that this ingress is part of. It must be in the same namespace as the <code>KafkaProxyIngress</code>.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="2"></i><b>2</b></td>
          <td>This ingress uses <code>clusterIP</code> networking, which uses Kubernetes <code>Service</code> resources with <code>type: ClusterIP</code> to configure Kubernetes DNS names for the virtual cluster.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="3"></i><b>3</b></td>
          <td>The protocol is set to accept plain TCP connections. Use <code>TLS</code> for encrypted client-proxy communication.</td>
         </tr>
        </tbody>
       </table>
      </div>
     </div>
     <div class="sect3">
      <h4 id="con-configuring-kafkaservice-bootstrap-operator">4.2.3. Configuration for proxied Kafka clusters</h4>
      <div class="paragraph">
       <p>A proxied Kafka cluster is configured in a <code>KafkaService</code> resource, which specifies how the proxy connects to the cluster. The Kafka cluster may or may not be running in the same Kubernetes cluster as the proxy: Network connectivity is all that’s required.</p>
      </div>
      <div class="paragraph">
       <p>This example shows a <code>KafkaService</code> defining how to connect to a Kafka cluster at <code>kafka.example.com</code>.</p>
      </div>
      <div class="listingblock">
       <div class="title">
        Example <code>KafkaService</code> configuration
       </div>
       <div class="content">
        <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">kind</span>: <span class="string"><span class="content">KafkaService</span></span>
<span class="key">metadata</span>:
  <span class="comment"># ...</span>
<span class="key">spec</span>:
  <span class="key">bootstrapServers</span>: <span class="string"><span class="content">kafka.example.com:9092 </span></span><i class="conum" data-value="1"></i><b>(1)</b>
  <span class="key">nodeIdRanges</span>: <i class="conum" data-value="2"></i><b>(2)</b>
    - <span class="string"><span class="content">name: brokers </span></span><i class="conum" data-value="3"></i><b>(3)</b>
      <span class="key">start</span>: <span class="string"><span class="content">0 </span></span><i class="conum" data-value="4"></i><b>(4)</b>
      <span class="key">end</span>: <span class="string"><span class="content">5</span></span> <i class="conum" data-value="5"></i><b>(5)</b>
  <span class="comment"># ...</span></code></pre>
       </div>
      </div>
      <div class="colist arabic">
       <table>
        <tbody>
         <tr>
          <td><i class="conum" data-value="1"></i><b>1</b></td>
          <td>The <code>bootstrapServers</code> property is a comma-separated list of addresses in <code>&lt;host&gt;:&lt;port&gt;</code> format. Including multiple broker addresses helps clients connect when one is unavailable.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="2"></i><b>2</b></td>
          <td><code>nodeIdRanges</code> declares the IDs of all the broker nodes in the Kafka cluster</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="3"></i><b>3</b></td>
          <td><code>name</code> is optional, but specifying it can make errors easier to diagnose.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="4"></i><b>4</b></td>
          <td>The start of the ID range, inclusive.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="5"></i><b>5</b></td>
          <td>The end of the ID range, inclusive.</td>
         </tr>
        </tbody>
       </table>
      </div>
     </div>
     <div class="sect3">
      <h4 id="con-configuring-virtualkafkacluster-operator">4.2.4. Virtual cluster configuration for in-cluster access without TLS</h4>
      <div class="paragraph">
       <p>A <code>VirtualKafkaCluster</code> resource defines a logical Kafka cluster that is accessible to clients over the network.</p>
      </div>
      <div class="paragraph">
       <p>The virtual cluster references the following:</p>
      </div>
      <div class="ulist">
       <ul>
        <li>
         <p>A <code>KafkaProxy</code> resource that the proxy is associated with.</p>
        </li>
        <li>
         <p>One or more <code>KafkaProxyIngress</code> resources that expose the virtual cluster to Kafka clients.</p>
        </li>
        <li>
         <p>A <code>KafkaService</code> resource that defined the backend Kafka cluster.</p>
        </li>
        <li>
         <p>Zero or more <code>KafkaProtocolFilter</code> resources that apply filters to the Kafka protocol traffic passing between clients and the backend Kafka cluster.</p>
        </li>
       </ul>
      </div>
      <div class="paragraph">
       <p>This example shows a <code>VirtualKafkaCluster</code>, exposing it to Kafka clients running on the same Kubernetes cluster. It uses plain TCP (as opposed to TLS) as the transport protocol.</p>
      </div>
      <div class="listingblock">
       <div class="title">
        Example <code>VirtualKafkaCluster</code> configuration
       </div>
       <div class="content">
        <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">kind</span>: <span class="string"><span class="content">VirtualKafkaCluster</span></span>
<span class="key">apiVersion</span>: <span class="string"><span class="content">kroxylicious.io/v1alpha1</span></span>
<span class="key">metadata</span>:
  <span class="key">name</span>: <span class="string"><span class="content">my-cluster</span></span>
  <span class="key">namespace</span>: <span class="string"><span class="content">my-proxy</span></span>
<span class="key">spec</span>:
  <span class="key">proxyRef</span>: <i class="conum" data-value="1"></i><b>(1)</b>
    <span class="key">name</span>: <span class="string"><span class="content">simple</span></span>
  <span class="key">targetKafkaServiceRef</span>: <i class="conum" data-value="2"></i><b>(2)</b>
    <span class="key">name</span>: <span class="string"><span class="content">my-cluster</span></span>
  <span class="key">ingresses</span>:
    - <span class="string"><span class="content">ingressRef: </span><span class="content"><i class="conum" data-value="3"></i><b>(3)</b>
        name: cluster-ip</span></span></code></pre>
       </div>
      </div>
      <div class="colist arabic">
       <table>
        <tbody>
         <tr>
          <td><i class="conum" data-value="1"></i><b>1</b></td>
          <td>The <code>proxyRef</code> names the <code>KafkaProxy</code> hosting with this virtual cluster. It must be in the same namespace as the <code>VirtualKafkaCluster</code>.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="2"></i><b>2</b></td>
          <td>The <code>KafkaService</code> that is proxied by the virtual cluster. It must be in the same namespace as the <code>VirtualKafkaCluster</code>.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="3"></i><b>3</b></td>
          <td>Ingresses to expose the virtual cluster. Each ingress names a <code>KafkaProxyIngress</code> which must be in the same namespace as the <code>VirtualKafkaCluster</code>.</td>
         </tr>
        </tbody>
       </table>
      </div>
     </div>
    </div>
    <div class="sect2">
     <h3 id="assembly-configuring-kafkaprotocolfilters-operator">4.3. Filters</h3>
     <div class="paragraph _abstract">
      <p>A <code>KafkaProtocolFilter</code> resource represents a Kroxylicious Proxy filter. It is not uniquely associated with a <code>VirtualKafkaCluster</code> or <code>KafkaProxy</code> instance; it can be used in a number of <code>VirtualKafkaCluster</code> instances in the same namespace.</p>
     </div>
     <div class="paragraph">
      <p>A <code>KafkaProtocolFilter</code> is similar to one of the items in a proxy configuration’s <code>filterDefinitions</code>:</p>
     </div>
     <div class="ulist">
      <ul>
       <li>
        <p>The resource’s <code>metadata.name</code> corresponds directly to the <code>name</code> of a <code>filterDefinitions</code> item.</p>
       </li>
       <li>
        <p>The resource’s <code>spec.type</code> corresponds directly to the <code>type</code> of a <code>filterDefinitions</code> item.</p>
       </li>
       <li>
        <p>The resource’s <code>spec.configTemplate</code> corresponds to the <code>config</code> of a <code>filterDefinitions</code> item, but is subject to interpolation by the operator.</p>
       </li>
      </ul>
     </div>
    </div>
   </div>
  </div>
  <div class="sect1">
   <h2 id="assembly-operator-secure-proxy-securing">5. Securing a proxy</h2>
   <div class="sectionbody">
    <div class="paragraph _abstract">
     <p>Secure proxies by using TLS and storing sensitive values in external resources.</p>
    </div>
    <div class="sect2">
     <h3 id="prerequisites_2">5.1. Prerequisites</h3>
     <div class="ulist">
      <ul>
       <li>
        <p>A running Kroxylicious proxy instance</p>
       </li>
      </ul>
     </div>
    </div>
    <div class="sect2">
     <h3 id="assembly-operator-secure-client-proxy-connection-securing">5.2. Securing the client-to-proxy connection</h3>
     <div class="paragraph _abstract">
      <p>Secure client-to-proxy communications using TLS.</p>
     </div>
     <div class="sect3">
      <h4 id="con-configuring-virtualkafkacluster-securing">5.2.1. TLS configuration for client-to-proxy connections</h4>
      <div class="paragraph">
       <p>This example shows a <code>VirtualKafkaCluster</code>, exposing it to Kafka clients running on the same Kubernetes cluster. It uses TLS as the transport protocol so that communication between Kafka clients and the proxy is encrypted.</p>
      </div>
      <div class="listingblock">
       <div class="title">
        Example <code>VirtualKafkaCluster</code> configuration
       </div>
       <div class="content">
        <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">kind</span>: <span class="string"><span class="content">VirtualKafkaCluster</span></span>
<span class="key">apiVersion</span>: <span class="string"><span class="content">kroxylicious.io/v1alpha1</span></span>
<span class="key">metadata</span>:
  <span class="key">name</span>: <span class="string"><span class="content">my-cluster</span></span>
  <span class="key">namespace</span>: <span class="string"><span class="content">my-proxy</span></span>
<span class="key">spec</span>:
  <span class="key">proxyRef</span>: <i class="conum" data-value="1"></i><b>(1)</b>
    <span class="key">name</span>: <span class="string"><span class="content">simple</span></span>
  <span class="key">targetKafkaServiceRef</span>: <i class="conum" data-value="2"></i><b>(2)</b>
    <span class="key">name</span>: <span class="string"><span class="content">my-cluster</span></span>
  <span class="key">ingresses</span>:
    - <span class="string"><span class="content">ingressRef: </span><span class="content"><i class="conum" data-value="3"></i><b>(3)</b>
        name: cluster-ip</span></span>
      <span class="key">tls</span>: <i class="conum" data-value="4"></i><b>(4)</b>
        <span class="key">certificateRef</span>:
          <span class="key">name</span>: <span class="string"><span class="content">server-certificate</span></span>
          <span class="key">kind</span>: <span class="string"><span class="content">Secret</span></span></code></pre>
       </div>
      </div>
      <div class="colist arabic">
       <table>
        <tbody>
         <tr>
          <td><i class="conum" data-value="1"></i><b>1</b></td>
          <td>The <code>proxyRef</code> names the <code>KafkaProxy</code> resource that this virtual cluster is part of. It must be in the same namespace as the <code>VirtualKafkaCluster</code>.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="2"></i><b>2</b></td>
          <td>The virtual cluster names the <code>KafkaService</code> to be proxied. It must be in the same namespace as the <code>VirtualKafkaCluster</code>.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="3"></i><b>3</b></td>
          <td>The virtual cluster can be exposed by one or more ingresses. Each ingress must reference a <code>KafkaProxyIngress</code> in the same namespace as the <code>VirtualKafkaCluster</code>.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="4"></i><b>4</b></td>
          <td>If the ingress supports TLS, the <code>tls</code> property configures the TLS server certificate to use.</td>
         </tr>
        </tbody>
       </table>
      </div>
      <div class="paragraph">
       <p>Within a <code>VirtualKafkaCluster</code>, an ingress’s <code>tls</code> property configures TLS for that ingress. The <code>tls.certificateRef</code> specifies the <code>Secret</code> resource holding the TLS server certificate that the proxy uses for clients connecting through this ingress. The referenced <code>KafkaProxyIngress</code> also needs to be configured for TLS.</p>
      </div>
      <div class="listingblock">
       <div class="title">
        Example <code>KafkaProxyIngress</code> configuration for TLS
       </div>
       <div class="content">
        <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">kind</span>: <span class="string"><span class="content">KafkaProxyIngress</span></span>
<span class="key">apiVersion</span>: <span class="string"><span class="content">kroxylicious.io/v1alpha1</span></span>
<span class="key">metadata</span>:
  <span class="key">name</span>: <span class="string"><span class="content">cluster-ip</span></span>
  <span class="key">namespace</span>: <span class="string"><span class="content">my-proxy</span></span>
<span class="key">spec</span>:
  <span class="key">proxyRef</span>: <i class="conum" data-value="1"></i><b>(1)</b>
    <span class="key">name</span>: <span class="string"><span class="content">simple</span></span>
  <span class="key">clusterIP</span>: <i class="conum" data-value="2"></i><b>(2)</b>
    <span class="key">protocol</span>: <span class="string"><span class="content">TLS </span></span><i class="conum" data-value="3"></i><b>(3)</b></code></pre>
       </div>
      </div>
      <div class="colist arabic">
       <table>
        <tbody>
         <tr>
          <td><i class="conum" data-value="1"></i><b>1</b></td>
          <td>The ingress must reference a <code>KafkaProxy</code> in the same namespace as the <code>KafkaProxyIngress</code>.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="2"></i><b>2</b></td>
          <td>Exposes the proxy to Kafka clients inside the same Kubernetes cluster using a <code>ClusterIP</code> service.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="3"></i><b>3</b></td>
          <td>The ingress uses <code>TLS</code> as the transport protocol.</td>
         </tr>
        </tbody>
       </table>
      </div>
     </div>
     <div class="sect3">
      <h4 id="con-kafka-client-mtls-securing">5.2.2. Mutual TLS configuration for client-to-proxy connections</h4>
      <div class="paragraph">
       <p>You can configure a virtual cluster ingress to request or require Kafka clients to authenticate to the proxy using TLS. This configuration is known as mutual TLS (mTLS), because both the client and the proxy authenticate each other using TLS.</p>
      </div>
      <div class="listingblock">
       <div class="title">
        Example <code>VirtualKafkaCluster</code> configuration requiring clients to present a trusted certificate
       </div>
       <div class="content">
        <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">kind</span>: <span class="string"><span class="content">VirtualKafkaCluster</span></span>
<span class="key">metadata</span>:
  <span class="comment"># ...</span>
<span class="key">spec</span>:
  <span class="comment"># ...</span>
  <span class="key">ingresses</span>:
    - <span class="string"><span class="content">ingressRef:</span><span class="content">
        name: cluster-ip</span></span>
      <span class="key">tls</span>:
        <span class="key">certificateRef</span>:
          <span class="comment"># ...</span>
        <span class="key">trustAnchorRef</span>: <i class="conum" data-value="1"></i><b>(1)</b>
          <span class="key">kind</span>: <span class="string"><span class="content">ConfigMap </span></span><i class="conum" data-value="2"></i><b>(2)</b>
          <span class="key">name</span>: <span class="string"><span class="content">trusted-cas </span></span><i class="conum" data-value="3"></i><b>(3)</b>
          <span class="key">key</span>: <span class="string"><span class="content">trusted-cas.pem </span></span><i class="conum" data-value="4"></i><b>(4)</b>
        <span class="key">tlsClientAuthentication</span>: <span class="string"><span class="content">REQUIRED </span></span><i class="conum" data-value="5"></i><b>(5)</b></code></pre>
       </div>
      </div>
      <div class="colist arabic">
       <table>
        <tbody>
         <tr>
          <td><i class="conum" data-value="1"></i><b>1</b></td>
          <td>References a separate Kubernetes resource containing the trusted CA certificates.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="2"></i><b>2</b></td>
          <td>The <code>kind</code> is optional and defaults to <code>ConfigMap</code>.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="3"></i><b>3</b></td>
          <td>Name of the resource of the given <code>kind</code>, which must exist in the same namespace as the <code>VirtualKafkaCluster</code>.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="4"></i><b>4</b></td>
          <td>Key identifying the entry in the given resource. The corresponding value must be a set of CA certificates. Supported formats for the bundle are: <code>PEM</code>, <code>PKCS#12</code>, and <code>JKS</code>.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="5"></i><b>5</b></td>
          <td>Specifies whether client authentication is required (<code>REQUIRED</code>), requested (<code>REQUESTED</code>), or disabled (<code>NONE</code>). If a <code>trustAnchorRef</code> is specified, the default is <code>REQUIRED</code>.</td>
         </tr>
        </tbody>
       </table>
      </div>
     </div>
     <div class="sect3">
      <h4 id="con-kafka-client-tls-protocol-securing">5.2.3. TLS version configuration for client-to-proxy connections</h4>
      <div class="paragraph">
       <p>Some older versions of TLS (and SSL before it) are now considered insecure. These versions remain enabled by default in order to maximize interoperability between TLS clients and servers that only support older versions.</p>
      </div>
      <div class="paragraph">
       <p>If the Kafka cluster than you want to connect to supports newer TLS versions, you can disable the proxy’s support for older, insecure versions. For example, if the Kafka cluster supports TLSv1.1, TLSv1.2 and TLSv1.3 you might choose to enable only TLSv1.3 support. This would reduce the susceptibility to a TLS downgrade attack.</p>
      </div>
      <div class="admonitionblock important">
       <table>
        <tbody>
         <tr>
          <td class="icon"><i class="fa icon-important" title="Important"></i></td>
          <td class="content">It is good practice to disable insecure protocol versions.</td>
         </tr>
        </tbody>
       </table>
      </div>
      <div class="paragraph">
       <p>You can restrict which TLS protocol versions the proxy supports for client-to-proxy connections by configuring the <code>protocols</code> property.</p>
      </div>
      <div class="listingblock">
       <div class="title">
        Example <code>VirtualKafkaCluster</code> with restricted TLS protocol versions
       </div>
       <div class="content">
        <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">kind</span>: <span class="string"><span class="content">VirtualKafkaCluster</span></span>
<span class="key">metadata</span>:
  <span class="comment"># ...</span>
<span class="key">spec</span>:
  <span class="comment"># ...</span>
  <span class="key">ingresses</span>:
    - <span class="string"><span class="content">ingressRef:</span><span class="content">
        name: cluster-ip</span></span>
      <span class="key">tls</span>:
        <span class="key">certificateRef</span>:
          <span class="comment"># ...</span>
        <span class="key">protocols</span>: <i class="conum" data-value="1"></i><b>(1)</b>
          <span class="key">allow</span>: <i class="conum" data-value="2"></i><b>(2)</b>
            - <span class="string"><span class="content">TLSv1.3</span></span></code></pre>
       </div>
      </div>
      <div class="colist arabic">
       <table>
        <tbody>
         <tr>
          <td><i class="conum" data-value="1"></i><b>1</b></td>
          <td>Configures the TLS protocol versions used by the proxy.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="2"></i><b>2</b></td>
          <td>Lists the protocol versions explicitly allowed for TLS negotiation.</td>
         </tr>
        </tbody>
       </table>
      </div>
      <div class="paragraph">
       <p>Alternatively, you can use <code>deny</code> to specify protocol versions to exclude.</p>
      </div>
      <div class="paragraph">
       <p>The names of the TLS protocol versions supported depend on the JVM in the proxy container image. See <a href="https://docs.oracle.com/en/java/javase/17/docs/specs/security/standard-names.html#sslcontext-algorithms" class="bare">https://docs.oracle.com/en/java/javase/17/docs/specs/security/standard-names.html#sslcontext-algorithms</a>.</p>
      </div>
     </div>
     <div class="sect3">
      <h4 id="con-kafka-client-tls-cipher-securing">5.2.4. TLS cipher suite configuration for client-to-proxy connections</h4>
      <div class="paragraph">
       <p>A cipher suite is a set of cryptographic algorithms that together provide the security guarantees offered by TLS. During TLS negotiation, a server and client agree on a common cipher suite that they both support.</p>
      </div>
      <div class="paragraph">
       <p>Some older cipher suites are now considered insecure, but may be enabled on the Kafka cluster to allow older clients to connect.</p>
      </div>
      <div class="paragraph">
       <p>The cipher suites enabled by default in the proxy depend on the JVM used in the proxy image and the TLS protocol version that is negotiated.</p>
      </div>
      <div class="paragraph">
       <p>To prevent TLS downgrade attacks, you can disable cipher suites known to be insecure or no longer recommended. However, the proxy and the cluster must support at least one cipher suite in common.</p>
      </div>
      <div class="admonitionblock important">
       <table>
        <tbody>
         <tr>
          <td class="icon"><i class="fa icon-important" title="Important"></i></td>
          <td class="content">It is good practice to disable insecure cipher suites.</td>
         </tr>
        </tbody>
       </table>
      </div>
      <div class="paragraph">
       <p>You can restrict which TLS cipher suites the proxy uses when negotiating client-to-proxy connections by configuring the <code>cipherSuites</code> property.</p>
      </div>
      <div class="listingblock">
       <div class="title">
        Example <code>VirtualKafkaCluster</code> configuration using cipherSuites to allow specific ciphers
       </div>
       <div class="content">
        <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">kind</span>: <span class="string"><span class="content">VirtualKafkaCluster</span></span>
<span class="key">metadata</span>:
  <span class="comment"># ...</span>
<span class="key">spec</span>:
  <span class="comment"># ...</span>
  <span class="key">ingresses</span>:
    - <span class="string"><span class="content">ingressRef:</span><span class="content">
        name: cluster-ip</span></span>
      <span class="key">tls</span>:
        <span class="key">certificateRef</span>:
          <span class="comment"># ...</span>
        <span class="key">cipherSuites</span>: <i class="conum" data-value="1"></i><b>(1)</b>
          <span class="key">allow</span>: <i class="conum" data-value="2"></i><b>(2)</b>
           - <span class="string"><span class="content">TLS_AES_128_GCM_SHA256</span></span>
           - <span class="string"><span class="content">TLS_AES_256_GCM_SHA384</span></span></code></pre>
       </div>
      </div>
      <div class="colist arabic">
       <table>
        <tbody>
         <tr>
          <td><i class="conum" data-value="1"></i><b>1</b></td>
          <td>Configures the cipher suites used by the proxy.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="2"></i><b>2</b></td>
          <td>Lists the cipher suites explicitly allowed for TLS negotiation.</td>
         </tr>
        </tbody>
       </table>
      </div>
      <div class="paragraph">
       <p>Alternatively, you can use <code>deny</code> to specify cipher suites to exclude.</p>
      </div>
      <div class="paragraph">
       <p>The names of the cipher suites supported depend on the JVM in the proxy container image. See <a href="https://docs.oracle.com/en/java/javase/21/docs/specs/security/standard-names.html#jsse-cipher-suite-names" class="bare">https://docs.oracle.com/en/java/javase/21/docs/specs/security/standard-names.html#jsse-cipher-suite-names</a>.</p>
      </div>
     </div>
    </div>
    <div class="sect2">
     <h3 id="assembly-operator-secure-proxy-broker-connection-securing">5.3. Securing the proxy-to-broker connection</h3>
     <div class="paragraph _abstract">
      <p>Secure proxy-to-broker communication using TLS.</p>
     </div>
     <div class="sect3">
      <h4 id="con-configuring-kafkaservice-trust-securing">5.3.1. TLS trust configuration for proxy-to-cluster connections</h4>
      <div class="paragraph">
       <p>By default, the proxy uses the platform’s default trust store when connecting to the proxied cluster over TLS. This works if the cluster’s TLS certificates are signed by a well-known public Certificate Authority (CA), but fails if they’re signed by a private CA instead.</p>
      </div>
      <div class="admonitionblock important">
       <table>
        <tbody>
         <tr>
          <td class="icon"><i class="fa icon-important" title="Important"></i></td>
          <td class="content">It is good practice to configure trust explicitly, even when proxied cluster’s TLS certificates are signed by a public CA.</td>
         </tr>
        </tbody>
       </table>
      </div>
      <div class="paragraph">
       <p>This example configures a <code>KafkaService</code> to trust TLS certificates signed by any Certificate Authority (CA) listed in the <code>trusted-cas.pem</code> entry of the <code>ConfigMap</code> named <code>trusted-cas</code>.</p>
      </div>
      <div class="listingblock">
       <div class="title">
        Example <code>KafkaService</code> configuration for trusting certificates.
       </div>
       <div class="content">
        <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">kind</span>: <span class="string"><span class="content">KafkaService</span></span>
<span class="key">metadata</span>:
  <span class="comment"># ...</span>
<span class="key">spec</span>:
  <span class="key">bootstrapServers</span>: <span class="string"><span class="content">kafka.example.com:9092</span></span>
  <span class="key">tls</span>:
    <span class="key">trustAnchorRef</span>: <i class="conum" data-value="1"></i><b>(1)</b>
      <span class="key">kind</span>: <span class="string"><span class="content">ConfigMap </span></span><i class="conum" data-value="2"></i><b>(2)</b>
      <span class="key">name</span>: <span class="string"><span class="content">trusted-cas </span></span><i class="conum" data-value="3"></i><b>(3)</b>
      <span class="key">key</span>: <span class="string"><span class="content">trusted-cas.pem</span></span> <i class="conum" data-value="4"></i><b>(4)</b>
    <span class="comment"># ...</span></code></pre>
       </div>
      </div>
      <div class="colist arabic">
       <table>
        <tbody>
         <tr>
          <td><i class="conum" data-value="1"></i><b>1</b></td>
          <td>The <code>trustAnchorRef</code> property references a separate Kubernetes resource which contains the CA certificates to be trusted</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="2"></i><b>2</b></td>
          <td>The <code>kind</code> is optional and defaults to <code>ConfigMap</code>.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="3"></i><b>3</b></td>
          <td>The <code>name</code> of the resource of the given <code>kind</code>. This resource must exist in the same namespace as the <code>KafkaService</code></td>
         </tr>
         <tr>
          <td><i class="conum" data-value="4"></i><b>4</b></td>
          <td>The <code>key</code> identifies the entry in the given resource. The corresponding value must be a PEM-encoded set of CA certificates.</td>
         </tr>
        </tbody>
       </table>
      </div>
     </div>
     <div class="sect3">
      <h4 id="con-tls-auth-to-kafka-cluster-securing">5.3.2. TLS authentication to proxied Kafka clusters</h4>
      <div class="paragraph">
       <p>Some Kafka clusters require mutual TLS (mTLS) authentication. You can configure the proxy to present a TLS client certificate using the <code>KafkaService</code> resource.</p>
      </div>
      <div class="paragraph">
       <p>The TLS client certificate you provide must have been issued by a Certificate Authority (CA) that’s trusted by the proxied cluster.</p>
      </div>
      <div class="paragraph">
       <p>This example configures a <code>KafkaService</code> to use a TLS client certificate stored in a <code>Secret</code> named <code>tls-cert-for-kafka.example.com</code>.</p>
      </div>
      <div class="listingblock">
       <div class="title">
        Example <code>KafkaService</code> configuration with TLS client authentication.
       </div>
       <div class="content">
        <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">kind</span>: <span class="string"><span class="content">KafkaService</span></span>
<span class="key">metadata</span>:
  <span class="comment"># ...</span>
<span class="key">spec</span>:
  <span class="key">bootstrapServers</span>: <span class="string"><span class="content">kafka.example.com:9092</span></span>
  <span class="key">tls</span>:
    <span class="key">trustAnchorRef</span>:
      <span class="key">kind</span>: <span class="string"><span class="content">ConfigMap</span></span>
      <span class="key">name</span>: <span class="string"><span class="content">trusted-cas</span></span>
      <span class="key">key</span>: <span class="string"><span class="content">trusted-cas.pem</span></span>
    <span class="key">certificateRef</span>: <i class="conum" data-value="1"></i><b>(1)</b>
      <span class="key">kind</span>: <span class="string"><span class="content">Secret </span></span><i class="conum" data-value="2"></i><b>(2)</b>
      <span class="key">name</span>: <span class="string"><span class="content">tls-cert-for-kafka.example.com</span></span> <i class="conum" data-value="3"></i><b>(3)</b>
    <span class="comment"># ...</span></code></pre>
       </div>
      </div>
      <div class="colist arabic">
       <table>
        <tbody>
         <tr>
          <td><i class="conum" data-value="1"></i><b>1</b></td>
          <td>The <code>certificateRef</code> property identifies the TLS client certificate to use.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="2"></i><b>2</b></td>
          <td>The <code>kind</code> is optional and defaults to <code>Secret</code>. The <code>Secret</code> should have <code>type: kubernetes.io/tls</code>.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="3"></i><b>3</b></td>
          <td>The <code>name</code> is the name of the resource of the given <code>kind</code>. This resource must exist in the same namespace as the <code>KafkaService</code></td>
         </tr>
        </tbody>
       </table>
      </div>
     </div>
     <div class="sect3">
      <h4 id="con-configuring-kafkaservice-protocol-securing">5.3.3. TLS version configuration for proxy-to-cluster connections</h4>
      <div class="paragraph">
       <p>Some older versions of TLS (and SSL before it) are now considered insecure. These versions remain enabled by default in order to maximize interoperability between TLS clients and servers that only support older versions.</p>
      </div>
      <div class="paragraph">
       <p>If the Kafka cluster than you want to connect to supports newer TLS versions, you can disable the proxy’s support for older, insecure versions. For example, if the Kafka cluster supports TLSv1.1, TLSv1.2 and TLSv1.3 you might choose to enable only TLSv1.3 support. This would reduce the susceptibility to a TLS downgrade attack.</p>
      </div>
      <div class="admonitionblock important">
       <table>
        <tbody>
         <tr>
          <td class="icon"><i class="fa icon-important" title="Important"></i></td>
          <td class="content">It is good practice to disable insecure protocol versions.</td>
         </tr>
        </tbody>
       </table>
      </div>
      <div class="paragraph">
       <p>This example configures a <code>KafkaService</code> to allow only TLS v1.3 when connecting to <code>kafka.example.com</code>.</p>
      </div>
      <div class="listingblock">
       <div class="title">
        Example <code>KafkaService</code> with restricted TLS protocol versions.
       </div>
       <div class="content">
        <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">kind</span>: <span class="string"><span class="content">KafkaService</span></span>
<span class="key">metadata</span>:
  <span class="comment"># ...</span>
<span class="key">spec</span>:
  <span class="key">bootstrapServers</span>: <span class="string"><span class="content">kafka.example.com:9092</span></span>
  <span class="key">tls</span>:
    <span class="comment"># ...</span>
    <span class="key">protocols</span>: <i class="conum" data-value="1"></i><b>(1)</b>
      <span class="key">allow</span>: <i class="conum" data-value="2"></i><b>(2)</b>
        - <span class="string"><span class="content">TLSv1.3</span></span></code></pre>
       </div>
      </div>
      <div class="colist arabic">
       <table>
        <tbody>
         <tr>
          <td><i class="conum" data-value="1"></i><b>1</b></td>
          <td>The <code>protocols</code> property configures the TLS protocol versions</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="2"></i><b>2</b></td>
          <td><code>allow</code> lists the versions of TLS which are permitted.</td>
         </tr>
        </tbody>
       </table>
      </div>
      <div class="paragraph">
       <p>The <code>protocols</code> property also supports <code>deny</code>, if you prefer to list the versions to exclude instead.</p>
      </div>
      <div class="paragraph">
       <p>The names of the TLS protocol versions supported depend on the JVM in the proxy container image. See <a href="https://docs.oracle.com/en/java/javase/17/docs/specs/security/standard-names.html#sslcontext-algorithms" class="bare">https://docs.oracle.com/en/java/javase/17/docs/specs/security/standard-names.html#sslcontext-algorithms</a>.</p>
      </div>
     </div>
     <div class="sect3">
      <h4 id="con-configuring-kafkaservice-cipher-securing">5.3.4. TLS cipher suite configuration for proxy-to-cluster connections</h4>
      <div class="paragraph">
       <p>A cipher suite is a set of cryptographic algorithms that together provide the security guarantees offered by TLS. During TLS negotiation, a server and client agree on a common cipher suite that they both support.</p>
      </div>
      <div class="paragraph">
       <p>Some older cipher suites are now considered insecure, but may be enabled on the Kafka cluster to allow older clients to connect.</p>
      </div>
      <div class="paragraph">
       <p>The cipher suites enabled by default in the proxy depend on the JVM used in the proxy image and the TLS protocol version that is negotiated.</p>
      </div>
      <div class="paragraph">
       <p>To prevent TLS downgrade attacks, you can disable cipher suites known to be insecure or no longer recommended. However, the proxy and the cluster must support at least one cipher suite in common.</p>
      </div>
      <div class="admonitionblock important">
       <table>
        <tbody>
         <tr>
          <td class="icon"><i class="fa icon-important" title="Important"></i></td>
          <td class="content">It is good practice to disable insecure cipher suites.</td>
         </tr>
        </tbody>
       </table>
      </div>
      <div class="listingblock">
       <div class="title">
        Example <code>KafkaService</code> configured so that the proxy will negotiate TLS connection using only the listed ciphers.
       </div>
       <div class="content">
        <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">kind</span>: <span class="string"><span class="content">KafkaService</span></span>
<span class="key">metadata</span>:
  <span class="comment"># ...</span>
<span class="key">spec</span>:
  <span class="key">bootstrapServers</span>: <span class="string"><span class="content">kafka.example.com:9092</span></span>
  <span class="key">tls</span>:
    <span class="comment"># ...</span>
    <span class="key">cipherSuites</span>: <i class="conum" data-value="1"></i><b>(1)</b>
      <span class="key">allow</span>: <i class="conum" data-value="2"></i><b>(2)</b>
       - <span class="string"><span class="content">TLS_AES_128_GCM_SHA256</span></span>
       - <span class="string"><span class="content">TLS_AES_256_GCM_SHA384</span></span></code></pre>
       </div>
      </div>
      <div class="colist arabic">
       <table>
        <tbody>
         <tr>
          <td><i class="conum" data-value="1"></i><b>1</b></td>
          <td>The <code>cipherSuites</code> object configures the cipher suites.</td>
         </tr>
         <tr>
          <td><i class="conum" data-value="2"></i><b>2</b></td>
          <td><code>allow</code> lists the cipher suites which are permitted.</td>
         </tr>
        </tbody>
       </table>
      </div>
      <div class="paragraph">
       <p>The <code>cipherSuites</code> property also supports <code>deny</code>, if you prefer to list the cipher suites to exclude instead.</p>
      </div>
      <div class="paragraph">
       <p>The names of the cipher suites supported depend on the JVM in the proxy container image. See <a href="https://docs.oracle.com/en/java/javase/21/docs/specs/security/standard-names.html#jsse-cipher-suite-names" class="bare">https://docs.oracle.com/en/java/javase/21/docs/specs/security/standard-names.html#jsse-cipher-suite-names</a>.</p>
      </div>
     </div>
    </div>
    <div class="sect2">
     <h3 id="assembly-operator-secure-filter-securing">5.4. Securing filters</h3>
     <div class="paragraph _abstract">
      <p>Secure filters by using the security features provided by each filter and storing sensitive values in external resources such as a Kubernetes <code>Secret</code>.</p>
     </div>
     <div class="sect3">
      <h4 id="security_sensitive_values_in_filter_resources">5.4.1. Security-sensitive values in filter resources</h4>
      <div class="sect4">
       <h5 id="template_use_and_value_interpolation">Template use and value interpolation</h5>
       <div class="paragraph">
        <p>Interpolation is supported in <code>spec.configTemplate</code> for the automatic substitution of placeholder values at runtime. This allows security-sensitive values, such as passwords or keys, to be specified in Kubernetes <code>Secret</code> resources rather than directly in the <code>KafkaProtocolFilter</code> resource. Likewise, things like trusted CA certificates can be defined in <code>ConfigMap</code> resources.</p>
       </div>
       <div class="paragraph">
        <p>The operator determines which <code>Secret</code> and <code>ConfigMap</code> resources are referenced by a <code>KafkaProtocolFilter</code> resource and declares them as <code>volumes</code> in the proxy <code>Pod</code>, mounted into the proxy container. This example shows how to configure the <code>RecordEncryptionFilter</code> using a Vault KMS deployed in the same Kubernetes cluster.</p>
       </div>
       <div class="listingblock">
        <div class="title">
         Example <code>KafkaProtocolFilter</code> configuration
        </div>
        <div class="content">
         <pre class="CodeRay highlight"><code data-lang="yaml"><span class="key">kind</span>: <span class="string"><span class="content">KafkaProtocolFilter</span></span>
<span class="key">metadata</span>:
  <span class="comment"># ...</span>
<span class="key">spec</span>:
  <span class="key">type</span>: <span class="string"><span class="content">RecordEncryption </span></span><i class="conum" data-value="1"></i><b>(1)</b>
  <span class="key">configTemplate</span>: <i class="conum" data-value="2"></i><b>(2)</b>
    <span class="key">kms</span>: <span class="string"><span class="content">VaultKmsService</span></span>
    <span class="key">kmsConfig</span>:
      <span class="key">vaultTransitEngineUrl</span>: <span class="string"><span class="content">http://vault.vault.svc.cluster.local:8200/v1/transit</span></span>
      <span class="key">vaultToken</span>:
        <span class="key">password</span>: <span class="string"><span class="content">${secret:vault:token} </span></span><i class="conum" data-value="3"></i><b>(3)</b>
    <span class="key">selector</span>: <span class="string"><span class="content">TemplateKekSelector</span></span>
    <span class="key">selectorConfig</span>:
      <span class="key">template</span>: <span class="string"><span class="delimiter">"</span><span class="content">$(topicName)</span><span class="delimiter">"</span></span> <i class="conum" data-value="4"></i><b>(4)</b></code></pre>
        </div>
       </div>
       <div class="colist arabic">
        <table>
         <tbody>
          <tr>
           <td><i class="conum" data-value="1"></i><b>1</b></td>
           <td>The <code>type</code> is the Java class name of the proxy filter. If the unqualified name is ambiguous, it must be qualified by the filter package name.</td>
          </tr>
          <tr>
           <td><i class="conum" data-value="2"></i><b>2</b></td>
           <td>The <code>KafkaProtocolFilter</code> requires a <code>configTemplate</code>, which supports <em>interpolation references</em>.</td>
          </tr>
          <tr>
           <td><i class="conum" data-value="3"></i><b>3</b></td>
           <td>The <code>password</code> uses an <em>interpolation reference</em>, enclosed by <code>${</code> and <code>}</code> instead of a literal value. The operator supplies the value at runtime from the specified <code>Secret</code>.</td>
          </tr>
          <tr>
           <td><i class="conum" data-value="4"></i><b>4</b></td>
           <td>The selector <code>template</code> is interpreted by the proxy. It uses different delimiters, <code>$(</code> and <code>)</code>, than the <em>interpolation reference</em>.</td>
          </tr>
         </tbody>
        </table>
       </div>
      </div>
      <div class="sect4">
       <h5 id="structure_of_interpolation_references">Structure of interpolation references</h5>
       <div class="paragraph">
        <p>Let’s look at the example interpolation reference <code>${secret:vault:token}</code> in more detail.</p>
       </div>
       <div class="paragraph">
        <p>It starts with <code>${</code> and ends with <code>}</code>. Between these, it is broken into three parts, separated by colons (<code>:</code>):</p>
       </div>
       <div class="ulist">
        <ul>
         <li>
          <p><code>secret</code> is a <em>provider</em>. Supported providers are <code>secret</code> and <code>configmap</code> (note the use of lower case).</p>
         </li>
         <li>
          <p><code>vault</code> is a <em>path</em>. The interpretation of the path depends on the provider.</p>
         </li>
         <li>
          <p><code>token</code> is a <em>key</em>. The interpretation of the key also depends on the provider.</p>
         </li>
        </ul>
       </div>
       <div class="paragraph">
        <p>For both <code>secret</code> and <code>configmap</code> providers:</p>
       </div>
       <div class="ulist">
        <ul>
         <li>
          <p>The path is interpreted as the name of a <code>Secret</code> or <code>ConfigMap</code> resource in the same namespace as the <code>KafkaProtocolFilter</code> resource.</p>
         </li>
         <li>
          <p>The key is interpreted as a key in the <code>data</code> property of the <code>Secret</code> or <code>ConfigMap</code> resource.</p>
         </li>
        </ul>
       </div>
      </div>
     </div>
    </div>
   </div>
  </div>
  <div class="sect1">
   <h2 id="glossary">6. Glossary</h2>
   <div class="sectionbody">
    <div class="dlist">
     <dl>
      <dt class="hdlist1">API</dt>
      <dd>
       <p>Application Programmer Interface.</p>
      </dd>
      <dt class="hdlist1">CA</dt>
      <dd>
       <p>Certificate Authority. An organization that issues certificates.</p>
      </dd>
      <dt class="hdlist1">CR</dt>
      <dd>
       <p>Custom Resource. An instance resource of a CRD. In other words, a resource of a kind that is not built into Kubernetes.</p>
      </dd>
      <dt class="hdlist1">CRD</dt>
      <dd>
       <p>Custom Resource Definition. A Kubernetes API for defining Kubernetes API extensions.</p>
      </dd>
      <dt class="hdlist1">KMS</dt>
      <dd>
       <p>Key Management System. A dedicated system for controlling access to cryptographic material, and providing operations which use that material.</p>
      </dd>
      <dt class="hdlist1">mTLS</dt>
      <dd>
       <p>Mutual Transport Layer Security. A configuration of TLS where the client presents a certificate to a server, which the server authenticates.</p>
      </dd>
      <dt class="hdlist1">TLS</dt>
      <dd>
       <p>The Transport Layer Security. A secure transport protocol where a server presents a certificate to a client, which the client authenticates. TLS was previously known as the Secure Sockets Layer (SSL).</p>
      </dd>
      <dt class="hdlist1">TCP</dt>
      <dd>
       <p>The Transmission Control Protocol.</p>
      </dd>
     </dl>
    </div>
   </div>
  </div>
  <div class="sect1">
   <h2 id="trademark_notice">7. Trademark notice</h2>
   <div class="sectionbody">
    <div class="ulist">
     <ul>
      <li>
       <p>Apache Kafka is a registered trademark of The Apache Software Foundation.</p>
      </li>
      <li>
       <p>Kubernetes is a registered trademark of The Linux Foundation.</p>
      </li>
      <li>
       <p>Strimzi is a trademark of The Linux Foundation.</p>
      </li>
      <li>
       <p>Hashicorp Vault is a registered trademark of HashiCorp, Inc.</p>
      </li>
      <li>
       <p>AWS Key Management Service is a trademark of Amazon.com, Inc. or its affiliates.</p>
      </li>
      <li>
       <p>Fortanix and Data Security Manager are trademarks of Fortanix, Inc.</p>
      </li>
     </ul>
    </div>
   </div>
  </div>
 </body>
</html>
{% endraw %}
